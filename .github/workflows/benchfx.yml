name: "Check for performance regressions"

on:
  pull_request:

  push:
    branches:
      - main


# Env variables
env:
  # TODO turn this into a fixed commit eventually (and delete hacking branch)
  benchfx_rev: wasmtime_ci_hacking
  wasmtime_features: unsafe_wasmfx_stacks
  benchmark_filters: "--filter=**/*_wasmfx --filter=**/*_wasmfx_fiber --filter=**/*_asyncify"
  # Maximum allowed performance regression of any benchmark in percent.
  max_allowed_regression: 7

jobs:
  bench:
    name: Setup environment, prepare & run benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout wasmtime
      uses: actions/checkout@v4
      with:
        submodules: true
        path: wasmtime
        fetch-depth: 0

    - name: Checkout benchfx
      uses: actions/checkout@v4
      with:
        repository: 'wasmfx/benchfx'
        ref: ${{ env.benchfx_rev }}
        submodules: true
        path: benchfx
        fetch-depth: 0

    - name: Install hyperfine
      run: cargo install hyperfine

    - name: Install other deps
      run: sudo apt-get install cmake ocaml dune menhir libmenhir-ocaml-dev

# FIXME the last git show must be removed for commits to main
    - name: Show context info
      working-directory: ./wasmtime
      run: |
        echo "$GITHUB_WORKSPACE"
        ls -l "$GITHUB_WORKSPACE"
        ls -l "$GITHUB_WORKSPACE/wasmtime"
        ls -l "$GITHUB_WORKSPACE/benchfx"
        cargo --version
        rustc --version
        echo "benchmark_filters: $benchmark_filters"
        echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
        echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
        echo "GITHUB_SHA: $GITHUB_SHA"
        echo "GITHUB_SHA^1: ${GITHUB_SHA}^1"
        #git show --oneline "${GITHUB_SHA}"
        #git show --oneline "${GITHUB_SHA}^1"
        #git show --oneline "${GITHUB_SHA}^2"

    - name: Initialize benchfx
      working-directory: ./benchfx
      shell: bash
      run: |
        ./harness.py -v setup \
          --wasmtime-create-worktree-from-development-repo=$GITHUB_WORKSPACE/wasmtime

        # The following is only necessary because we are about to restore the
        # build directory inside the binaryen repo inside benchfx from the
        # cache. But the binaryen repo is currently a bare repo and doesn't have
        # the .gitignore file with an entry for "build", yet. Instead of
        # checking out any revision to get the .gitignore file, we check out the
        # revision that the harness wants to use. This way, the harness will not
        # "modify" any of the binaryen source files by switching to a different
        # revision later. This helps with caching.
        BINARYEN_REVISION="$(./harness.py print-config | jq .BINARYEN_REVISION)"
        pushd tools/external/binaryen
        git switch --detach --recurse-submodules $BINARYEN_REVISION
        popd


    - name: Restore build artifacts from cache
      uses: actions/cache@v4
      id: cache
      with:
        key: benchfx-${{ env.benchfx_rev }}
        path: |
          benchfx/tools/external/binaryen/build
          benchfx/tools/external/wasmtime1/target
          benchfx/tools/external/wasmtime2/target

    - name: Inspect caches
      run: |
        echo "cache hit: ${{ steps.cache.outputs.cache-hit }}"
        ls -la benchfx/tools/external/binaryen
        ls -la benchfx/tools/external/wasmtime1
        ls -la benchfx/tools/external/wasmtime2

    - name: Prepare benchmarking (build binaryen, wasmtime revs, benchmarks)
      shell: bash
      working-directory: ./benchfx
      run: |
        # The cache preserves mtimes, meaning that (the Makefile created by)
        # cmake would consider all files from the cache as outdated. Since the
        # harness fixes the binaryen commit, we know exactly that the binaryen
        # build artifcats are for binaryen version we want. Thus, we make them
        # eligible for re-use by making them look sufficiently new. Note that
        # cmake would detect any external changes that invalidate the cached
        find tools/external/binaryen/build -exec touch {} \; || true

        ./harness.py -v compare-revs --prepare-only \
          --rev1-wasmtime-cargo-build-args="--features=$wasmtime_features" \
          --rev2-wasmtime-cargo-build-args="--features=$wasmtime_features" \
          "${GITHUB_SHA}^1" "$GITHUB_SHA"

    - name: Run benchmarks
      shell: bash
      working-directory: ./benchfx
      run: |
        ./harness.py -v compare-revs \
          $benchmark_filters \
          --max-allowed-regression=$max_allowed_regression \
          --rev1-wasmtime-cargo-build-args="--features=$wasmtime_features" \
          --rev2-wasmtime-cargo-build-args="--features=$wasmtime_features" \
          "${GITHUB_SHA}^1" "$GITHUB_SHA"
